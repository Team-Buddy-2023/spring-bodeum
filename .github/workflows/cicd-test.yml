name: Spring Boot & Gradle CI/CD
run-name: Running
on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-northeast-2
  PROJECT_NAME: spring-bodeum
  S3_BUCKET_NAME: bodeumbucket
  CODE_DEPLOY_APP_NAME: bodeum-application
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: bodeum-group

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # application.properties 파일 생성
      - name: Make application.properties
        run: |
          cd ./src/main/resources
          touch ./application.properties
          
          echo "${{ secrets.DATABASE_PROPERTIES }}" >> ./application.properties
        shell: bash

      - name: Setup MySQL
        uses: mirromutth/mysql-action@v1.1
        with:
          mysql database: 'bodeum'
          mysql user: 'yeonsu'
          mysql password: ${{ secrets.MYSQL_PASSWORD }}

      # gradlew 파일 실행권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      # Gradle build (Test 제외)
      - name: Build with Gradle
        run: ./gradlew clean --stacktrace --info build
        shell: bash

      # create application-aws.properties
      - name: Make application-aws.properties
        if: contains(github.ref, 'master')
        run: |
          cd ./src/main/resources
          rm ./application.properties
          
          ls -al
          touch ./application.properties
          
          echo "copy properties"
          echo "${{ secrets.AWS_DATABASE_PROPERTIES }}" >> ./application.properties
        shell: bash

      # AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APP_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip